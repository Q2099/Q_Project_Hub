function updateSummary() {
  const iataFrom = document.getElementById("cc_sb3_sb3_flighthotel_sb3_flighthotel_iataFrom");
  const city = document.getElementById("cc_sb3_sb3_flighthotel_sb3_flighthotel_city");
  const outboundDate = document.getElementById("cc_sb3_sb3_flighthotel_sb3_flighthotel_outboundDate");
  const returnDate = document.getElementById("cc_sb3_sb3_flighthotel_sb3_hotel_numNights");
  const airline = document.getElementById("cc_sb3_sb3_flighthotel_sb3_flight_airlines_0");
  const classOfService = document.getElementById("cc_sb3_sb3_flighthotel_sb3_flight_classofservice");
  const numRooms = document.getElementById("cc_sb3_sb3_flighthotel_sb3_flighthotel_numRooms");
  const numGuests1 = document.getElementById("cc_sb3_sb3_flighthotel_flighthotel_numGuests1");
  const numGuests2 = document.getElementById("cc_sb3_sb3_flighthotel_flighthotel_numGuests2");
  const numGuests3 = document.getElementById("cc_sb3_sb3_flighthotel_flighthotel_numGuests3");

  const starRatings = document.querySelectorAll("#cc_sb3_sb3_flighthotel_start_rating_ctr_copy input[type='checkbox']:checked");
  const boardBasis = document.querySelectorAll("#cc_sb3_sb3_flighthotel_boardBasis_ctr input[type='checkbox']:checked");
  const directFlights = document.getElementById("cc_sb3_sb3_flighthotel_sb3_flighthotel_directflights_copy");
  const bagOnlyFares = document.getElementById("cc_sb3_sb3_flighthotel_bagOnly_fares");

  // Values
  const from = iataFrom?.value || "";
  const to = city?.value || "";
  const dep = outboundDate?.value || "";
  const ret = returnDate?.value || "";
  const air = airline?.value || "Any Airline";

  // Class presets
  const classMap = { E: "Economy", P: "Premium Economy", B: "Business", F: "First" };
  const travelClass = classMap[classOfService?.value] || "Any";

  const rooms = numRooms?.value || "1";
  const g1 = numGuests1?.value || "0";
  const g2 = numGuests2?.value || "0";
  const g3 = numGuests3?.value || "0";

 let guestSummary = `Room 1: ${guests1} Guests`;
    if (rooms >= 2) guestSummary += `, Room 2: ${guests2} Guests`;
    if (rooms >= 3) guestSummary += `, Room 3: ${guests3} Guests`;

    //let summary = `${fromVal} → ${cityVal} | ${outVal} → ${retVal} | ${airlineVal} | Class: ${className} | Stars: ${starSummary} | Board: ${boardSummary} | Rooms: ${rooms} | Guests: ${guestSummary}`;
   // let summary = `Class: ${className} | Stars: ${starSummary} | Board: ${boardSummary} | Rooms: ${rooms} | Guests: ${guestSummary}`;

  // Star rating summary
  const starValues = Array.from(starRatings).map(cb => cb.value);
  const starText = starValues.length > 0 ? `★ Star Rating: ${starValues.join(", ")}` : "";

  // Board basis summary
  const boardValues = Array.from(boardBasis).map(cb => cb.value);
  let boardText = "";
  if (boardValues.length > 0 && boardValues.length < 3) {
    boardText = `Board: ${boardValues.join(", ")}`;
  } else if (boardValues.length >= 3 && boardValues.length < 6) {
    boardText = `Board: Multiple`;
  } else if (boardValues.length === 6) {
    boardText = `Board: All`;
  }

  // Advanced options
  const directText = directFlights?.checked ? "Direct Flights Only" : "";
  const bagText = bagOnlyFares?.checked ? "Hand Luggage Only" : "";

  // Combine all
  const summaryParts = [
    //`${from} → ${to}`,
    //`${dep} → ${ret}`,
    `${air} | Class: ${travelClass}`,
    `Rooms: ${rooms} (${guestsText})`,
    starText,
    boardText,
    directText,
    bagText
  ].filter(Boolean);
  

  const summary = summaryParts.join("\n");

  const summaryBox = document.getElementById("summary");
  if (summaryBox) summaryBox.textContent = summary;
}

// Auto-update on any field change
function initSummaryListeners() {
  const fields = document.querySelectorAll("input, select");
  fields.forEach(field => {
    field.addEventListener("change", updateSummary);
    field.addEventListener("input", updateSummary);
  });
  window.addEventListener("DOMContentLoaded", updateSummary);
}

// Initialize
initSummaryListeners();


